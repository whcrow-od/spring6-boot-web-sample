<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>ua.od.whcrow.samples</groupId>
	<artifactId>spring6-boot-web-sample</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Spring6 Boot Web sample</name>
	<description>Sample project for Spring6 Boot Web</description>
	
	<properties>
		<!-- Spring Boot property for setting the source and the target java version -->
		<java.version>21</java.version>
		
		<!-- «««««««««««««««««««« ARTIFACT VERSIONS »»»»»»»»»»»»»»»»»»»» -->
		<spring-modulith.version>1.1.3</spring-modulith.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
		<!-- Unfortunately ModelMapper does not support mapping to Record and not planning to support.
		<modelmapper.version>3.2.0</modelmapper.version>
		<modelmapper-module-record.version>1.0.0</modelmapper-module-record.version>-->
		<json-patch.version>1.13</json-patch.version>
		<springdoc-openapi.version>2.5.0</springdoc-openapi.version>
		<jacoco.version>0.8.12</jacoco.version>
		
		<!-- «««««««««««««««««««« CUSTOM PROPERTIES »»»»»»»»»»»»»»»»»»»» -->
		<!-- Not recommended to set it to true because in this case surefire ignores the fact that some test fails.
		But it can be convenient on occasion. -->
		<surefire.generate-report-on-test-failure>false</surefire.generate-report-on-test-failure>
	</properties>
	
	<dependencies>
		<!-- «««««««««««««««««««« CORE »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!--dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-jpa</artifactId>
		</dependency-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		
		<!-- «««««««««««««««««««« SECURITY »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		
		<!-- «««««««««««««««««««« MVC TEMPLATING »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
		</dependency>
		
		<!-- «««««««««««««««««««« DATASOURCE »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<!-- «««««««««««««««««««« COMMONS »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.java-json-tools</groupId>
			<artifactId>json-patch</artifactId>
			<version>${json-patch.version}</version>
		</dependency>
		
		<!-- «««««««««««««««««««« DOCS »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>
		
		<!-- «««««««««««««««««««« DEV TOOLS »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<!-- Debug via /actuator endpoints -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-actuator</artifactId>
			<scope>runtime</scope>
		</dependency-->
		<!--dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-observability</artifactId>
			<scope>runtime</scope>
		</dependency-->
		<!-- IntelliJ IDEA requires a change of properties to make a Spring Boot app auto-restart enabled:
			- Build, Execution, Deployment -> Compiler -> Build project automatically ☑
			- Advanced Settings -> Allow auto-make to start even if developed application is currently running ☑ -->
		<!--dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency-->
		
		<!-- «««««««««««««««««««« NATIVE IMAGE »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<!-- https://github.com/oracle/graalvm-reachability-metadata/
			This repository enables users of GraalVM Native Image to share and reuse metadata for libraries and frameworks in the Java ecosystem. -->
			<groupId>org.graalvm.buildtools</groupId>
			<artifactId>graalvm-reachability-metadata</artifactId>
			<version>${native-build-tools-plugin.version}</version>
			<classifier>repository</classifier>
			<type>zip</type>
		</dependency>
		
		<!-- «««««««««««««««««««« TESTS »»»»»»»»»»»»»»»»»»»» -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.modulith</groupId>
				<artifactId>spring-modulith-bom</artifactId>
				<version>${spring-modulith.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<!-- NOTE: Log4J v2 doesn't support native image, see https://issues.apache.org/jira/browse/LOG4J2-2649 (had to get back to Slf4J) -->
				<!-- TODO: AspectJ v1.9.21 doesn't support native image, Spring AOP v3.2.2 doesn't help with that. Re-check it after Spring Boot version update.
				Executable file can be compiled but it fails on start due to exceptions related to AspectJ, so I had to workaround it implementing org.springframework.aot.hint.RuntimeHintsRegistrar here and there.
				See https://github.com/eclipse-aspectj/aspectj/issues/227 -->
				<!-- FIXME: Spring Boot v3.2.3 Native Image build broken. Re-check it after Spring Boot version update.
				See https://github.com/spring-projects/spring-boot/issues/38910 -->
				<groupId>org.graalvm.buildtools</groupId>
				<artifactId>native-maven-plugin</artifactId>
				<configuration>
					<metadataRepository>
						<!-- https://github.com/oracle/graalvm-reachability-metadata/
						This repository enables users of GraalVM Native Image to share and reuse metadata for libraries and frameworks in the Java ecosystem. -->
						<enabled>true</enabled>
					</metadataRepository>
					<buildArgs>
						<buildArg>
							--initialize-at-build-time=com.sun.beans.finder.MethodFinder,com.sun.beans.introspect.ClassInfo,com.sun.beans.introspect.MethodInfo,com.sun.beans.TypeResolver,java.beans.Introspector,java.beans.ThreadGroupContext
						</buildArg>
					</buildArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<!-- Can be removed if org.mapstruct:mapstruct isn't used anymore -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<parameters>true</parameters>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>${lombok-mapstruct-binding.version}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-Amapstruct.defaultComponentModel=spring</arg>
						<arg>-Amapstruct.unmappedTargetPolicy=IGNORE</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<testFailureIgnore>${surefire.generate-report-on-test-failure}</testFailureIgnore>
					<!-- Dirty way to get rid of JDK 21 warning - dynamic loading of java agent (byte-buddy-agent), see https://github.com/mockito/mockito/issues/3037 -->
					<!--argLine>-XX:+EnableDynamicAgentLoading</argLine-->
					<!-- Adds support of @DisplayName and @DisplayNameGeneration during report generation, see /target/surefire-reports
					 https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html#surefire-extensions-and-reports-configuration-for-displayname -->
					<statelessTestsetReporter
							implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
						<usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
					</statelessTestsetReporter>
				</configuration>
			</plugin>
			<plugin>
				<!-- Try "mvn site" to create an HTML report about project (all dependencies, plugins, licenses etc.).
				See it at ${project.build.outputDirectory}/site/index.html -->
				 <!-- According to the current configuration, plugin auto-creates HTML report about testing results
				 during "test" phase (testing results generated by maven-surefire-plugin).
				 See it at ${project.build.outputDirectory}/site/surefire-report.html -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<executions>
					<execution>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Automatically creates an HTML report about testing code coverage during "test" phase.
				 See it at ${project.build.outputDirectory}/site/jacoco/index.html -->
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<id>jacoco-prepare</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
</project>
